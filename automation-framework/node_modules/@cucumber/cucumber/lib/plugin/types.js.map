{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/plugin/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Envelope } from '@cucumber/messages'\nimport { ArrayValues, Promisable } from 'type-fest'\nimport { IRunEnvironment } from '../api'\nimport { ILogger } from '../logger'\nimport { IFilterablePickle } from '../filter'\nimport { IResolvedPaths } from '../paths'\nimport { coordinatorTransformKeys, coordinatorVoidKeys } from './events'\n\nexport type Operation = 'loadSources' | 'loadSupport' | 'runCucumber'\n\nexport type CoordinatorPluginVoidEventKey = ArrayValues<\n  typeof coordinatorVoidKeys\n>\nexport type CoordinatorPluginTransformEventKey = ArrayValues<\n  typeof coordinatorTransformKeys\n>\nexport type CoordinatorPluginEventKey =\n  | CoordinatorPluginVoidEventKey\n  | CoordinatorPluginTransformEventKey\n\nexport type CoordinatorPluginEventValues = {\n  // void\n  message: Readonly<Envelope>\n  'paths:resolve': Readonly<IResolvedPaths>\n  // transform\n  'pickles:filter': Readonly<Array<IFilterablePickle>>\n  'pickles:order': Readonly<Array<IFilterablePickle>>\n}\n\nexport type CoordinatorPluginEventHandler<K extends CoordinatorPluginEventKey> =\n  (\n    value: CoordinatorPluginEventValues[K]\n  ) => K extends CoordinatorPluginTransformEventKey\n    ? Promisable<CoordinatorPluginEventValues[K]>\n    : void\n\nexport interface CoordinatorPluginContext<OptionsType> {\n  operation: Operation\n  on: <EventKey extends CoordinatorPluginEventKey>(\n    event: EventKey,\n    handler: CoordinatorPluginEventHandler<EventKey>\n  ) => void\n  options: OptionsType\n  logger: ILogger\n  environment: Required<IRunEnvironment>\n}\n\nexport type CoordinatorPluginFunction<OptionsType> = (\n  context: CoordinatorPluginContext<OptionsType>\n) => Promisable<PluginCleanup | void>\n\nexport type PluginCleanup = () => Promisable<void>\n\n/**\n * A plugin to implement Cucumber built-in functionality.\n *\n * Uses the same events and mechanisms as user-authored plugins, but is free to require configuration and context from\n * inside of Cucumber as its `options`, whereas user-authored plugins will be limited to `pluginOptions` from the\n * project configuration.\n */\nexport interface InternalPlugin<OptionsType = any> {\n  type: 'plugin'\n  coordinator: CoordinatorPluginFunction<OptionsType>\n}\n"]}