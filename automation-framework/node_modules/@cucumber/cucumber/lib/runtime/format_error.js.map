{"version":3,"file":"format_error.js","sourceRoot":"","sources":["../../src/runtime/format_error.ts"],"names":[],"mappings":";;;;;;AACA,yEAAkD;AAClD,4EAAiD;AACjD,8DAAwD;AAExD,SAAgB,WAAW,CACzB,KAAY,EACZ,iBAA0B;IAE1B,IAAI,mBAA2B,CAAA;IAC/B,IAAI;QACF,MAAM,WAAW,GAAG,4BAAgB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACjD,MAAM,aAAa,GAAG,iBAAiB;YACrC,CAAC,CAAC,IAAA,qCAAgB,EAAC,WAAW,CAAC;YAC/B,CAAC,CAAC,WAAW,CAAA;QACf,mBAAmB,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;KACpE;IAAC,MAAM;QACN,yEAAyE;KAC1E;IACD,MAAM,OAAO,GAAG,IAAA,kCAAM,EAAC,KAAK,EAAE;QAC5B,QAAQ,EAAE;YACR,UAAU,EAAE,CAAC,KAAa,EAAE,EAAE;gBAC5B,OAAO,mBAAmB,CAAC,CAAC,CAAC,KAAK,mBAAmB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAA;YACjE,CAAC;SACF;KACF,CAAC,CAAA;IACF,OAAO;QACL,OAAO;QACP,SAAS,EAAE;YACT,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,OAAO;YAC3B,OAAO,EAAE,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO;YAC1D,UAAU,EAAE,mBAAmB,IAAI,KAAK,CAAC,KAAK;SAC/C;KACF,CAAA;AACH,CAAC;AA7BD,kCA6BC","sourcesContent":["import { TestStepResult } from '@cucumber/messages'\nimport { format } from 'assertion-error-formatter'\nimport errorStackParser from 'error-stack-parser'\nimport { filterStackTrace } from '../filter_stack_trace'\n\nexport function formatError(\n  error: Error,\n  filterStackTraces: boolean\n): Pick<TestStepResult, 'message' | 'exception'> {\n  let processedStackTrace: string\n  try {\n    const parsedStack = errorStackParser.parse(error)\n    const filteredStack = filterStackTraces\n      ? filterStackTrace(parsedStack)\n      : parsedStack\n    processedStackTrace = filteredStack.map((f) => f.source).join('\\n')\n  } catch {\n    // if we weren't able to parse and process, we'll settle for the original\n  }\n  const message = format(error, {\n    colorFns: {\n      errorStack: (stack: string) => {\n        return processedStackTrace ? `\\n${processedStackTrace}` : stack\n      },\n    },\n  })\n  return {\n    message,\n    exception: {\n      type: error.name || 'Error',\n      message: typeof error === 'string' ? error : error.message,\n      stackTrace: processedStackTrace ?? error.stack,\n    },\n  }\n}\n"]}