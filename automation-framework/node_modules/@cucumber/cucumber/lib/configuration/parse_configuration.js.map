{"version":3,"file":"parse_configuration.js","sourceRoot":"","sources":["../../src/configuration/parse_configuration.ts"],"names":[],"mappings":";;;;;;AAAA,8DAAoC;AAGpC,gEAAsC;AACtC,iDAA4C;AAE5C,SAAgB,kBAAkB,CAChC,MAAe,EACf,MAAc,EACd,UAAmE;IAEnE,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,EAAE,CAAA;KACV;IACD,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;QAC7B,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,mDAAmD,CAAC,CAAA;QAC1E,MAAM,EAAE,aAAa,EAAE,GAAG,qBAAU,CAAC,KAAK,CAAC;YACzC,MAAM;YACN,aAAa;YACb,GAAG,UAAU;SACd,CAAC,CAAA;QACF,OAAO,aAAa,CAAA;KACrB;IACD,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,mDAAmD,CAAC,CAAA;QAC1E,MAAM,EAAE,aAAa,EAAE,GAAG,qBAAU,CAAC,KAAK,CAAC;YACzC,MAAM;YACN,aAAa;YACb,GAAG,IAAA,qBAAU,EAAC,UAAU,CAAC;SAC1B,CAAC,CAAA;QACF,OAAO,aAAa,CAAA;KACrB;IACD,IAAI;QACF,OAAO,IAAA,0BAAW,EAAC,UAAU,CAAC,CAAA;KAC/B;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CACb,GAAG,MAAM,kDAAkD,KAAK,CAAC,MAAM,CAAC,IAAI,CAC1E,GAAG,CACJ,EAAE,CACJ,CAAA;KACF;AACH,CAAC;AAnCD,gDAmCC","sourcesContent":["import stringArgv from 'string-argv'\nimport { ILogger } from '../logger'\nimport { IConfiguration } from './types'\nimport ArgvParser from './argv_parser'\nimport { checkSchema } from './check_schema'\n\nexport function parseConfiguration(\n  logger: ILogger,\n  source: string,\n  definition: Partial<IConfiguration> | string[] | string | undefined\n): Partial<IConfiguration> {\n  if (!definition) {\n    return {}\n  }\n  if (Array.isArray(definition)) {\n    logger.debug(`${source} configuration value is an array; parsing as argv`)\n    const { configuration } = ArgvParser.parse([\n      'node',\n      'cucumber-js',\n      ...definition,\n    ])\n    return configuration\n  }\n  if (typeof definition === 'string') {\n    logger.debug(`${source} configuration value is a string; parsing as argv`)\n    const { configuration } = ArgvParser.parse([\n      'node',\n      'cucumber-js',\n      ...stringArgv(definition),\n    ])\n    return configuration\n  }\n  try {\n    return checkSchema(definition)\n  } catch (error) {\n    throw new Error(\n      `${source} configuration value failed schema validation: ${error.errors.join(\n        ' '\n      )}`\n    )\n  }\n}\n"]}