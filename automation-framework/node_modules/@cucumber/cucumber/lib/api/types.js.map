{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/api/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Writable } from 'node:stream'\nimport { JsonObject } from 'type-fest'\nimport { IPublishConfig } from '../publish'\nimport { IConfiguration } from '../configuration'\nimport { IPickleOrder } from '../filter'\n\n/**\n * Options for {@link loadConfiguration}\n * @public\n */\nexport interface ILoadConfigurationOptions {\n  /**\n   * Path to load configuration file from, or `false` to skip\n   * @default `cucumber.(json|yaml|yml|js|cjs|mjs)`\n   */\n  file?: string | false\n  /**\n   * Zero or more profile names from which to source configuration in the file\n   * @remarks\n   * If omitted or empty, the `default` profile will be used.\n   */\n  profiles?: string[]\n  /**\n   * Ad-hoc configuration options to be merged over the top of whatever is\n   * loaded from the configuration file/profiles\n   * @example\n   * \\{\n   *   failFast: true,\n   *   parallel: 2\n   * \\}\n   * @example [\"--fail-fast\", \"--parallel\", \"2\"]\n   * @example \"--fail-fast --parallel 2\"\n   * @remarks\n   * This can also be provided as an array or single string of argv-style\n   * arguments.\n   */\n  provided?: Partial<IConfiguration> | string[] | string\n}\n\n/**\n * Response from {@link loadConfiguration}\n * @public\n */\nexport interface IResolvedConfiguration {\n  /**\n   * The final flat configuration object resolved from the configuration\n   * file/profiles plus any extra provided\n   */\n  useConfiguration: IConfiguration\n  /**\n   * The format that can be passed into {@link runCucumber}\n   */\n  runConfiguration: IRunConfiguration\n}\n\n/**\n * Options relating to sources (i.e. feature files) - where to load them from,\n * how to interpret, filter and order them\n * @public\n */\nexport interface ISourcesCoordinates {\n  /**\n   * Default Gherkin dialect\n   * @remarks\n   * Used if no dialect is specified in the feature file itself.\n   */\n  defaultDialect: string\n  /**\n   * Paths and/or glob expressions to feature files\n   */\n  paths: string[]\n  /**\n   * Regular expressions of which scenario names should match one of to be run\n   */\n  names: string[]\n  /**\n   * Tag expression to filter which scenarios should be run\n   */\n  tagExpression: string\n  /**\n   * Run in the order defined, or in a random order\n   */\n  order: IPickleOrder\n}\n\n/**\n * A pickle that has been successfully compiled from a source\n * @public\n */\nexport interface IPlannedPickle {\n  /**\n   * Name of the pickle (after parameter resolution)\n   */\n  name: string\n  uri: string\n  location: {\n    line: number\n    column?: number\n  }\n}\n\n/**\n * An error encountered when parsing a source\n * @public\n */\nexport interface ISourcesError {\n  uri: string\n  location: {\n    line: number\n    column?: number\n  }\n  /**\n   * Error message explaining what went wrong with the parse\n   */\n  message: string\n}\n\n/**\n * Response from {@link loadSources}\n * @public\n */\nexport interface ILoadSourcesResult {\n  /**\n   * Pickles that have been successfully compiled, in the order they would be\n   * run in\n   */\n  plan: IPlannedPickle[]\n  /**\n   * Any errors encountered when parsing sources\n   */\n  errors: ISourcesError[]\n}\n\n/**\n * Options relating to user code (aka support code) - where to load it from and\n * how to preprocess it\n * @public\n */\nexport interface ISupportCodeCoordinates {\n  /**\n   * Names of transpilation modules to load, via `require()`\n   */\n  requireModules: string[]\n  /**\n   * Paths and/or glob expressions of user code to load, via `require()`\n   */\n  requirePaths: string[]\n  /**\n   * Paths and/or glob expressions of user code to load, via `import()`\n   */\n  importPaths: string[]\n}\n\n/**\n * Options for {@link loadSupport}\n * @public\n * @remarks\n * A subset of {@link IRunConfiguration}\n */\nexport interface ILoadSupportOptions {\n  /**\n   * @remarks\n   * This is needed because the default support path locations are derived from\n   * feature file locations.\n   */\n  sources: ISourcesCoordinates\n  support: ISupportCodeCoordinates\n}\n\n/**\n * Options relating to behaviour when actually running tests\n * @public\n */\nexport interface IRunOptionsRuntime {\n  /**\n   * Perform a dry run, where a test run is prepared but nothing is executed\n   */\n  dryRun: boolean\n  /**\n   * Stop running tests when a test fails\n   */\n  failFast: boolean\n  /**\n   * Filter out stack frames from Cucumber's code when formatting stack traces\n   */\n  filterStacktraces: boolean\n  /**\n   * Run tests in parallel with the given number of worker processes\n   */\n  parallel: number\n  /**\n   * Retry failing tests up to the given number of times\n   */\n  retry: number\n  /**\n   * Tag expression to filter which scenarios can be retried\n   */\n  retryTagFilter: string\n  /**\n   * Fail the test run if there are pending steps\n   */\n  strict: boolean\n  /**\n   * Parameters to be passed to the World\n   * @remarks\n   * The value must be a JSON-serializable object.\n   */\n  worldParameters: JsonObject\n}\n\n/**\n * Options relating to formatters - which ones to use, where to write their\n * output, how they should behave\n * @public\n */\nexport interface IRunOptionsFormats {\n  /**\n   * Name/path of the formatter to use for `stdout` output\n   */\n  stdout: string\n  /**\n   * Zero or more mappings of file output path (key) to name/path of the\n   * formatter to use (value)\n   * @example\n   * \\{\n   *   \"./reports/cucumber.html\": \"html\",\n   *   \"./reports/custom.txt\": \"./custom-formatter.js\"\n   * \\}\n   */\n  files: Record<string, string>\n  /**\n   * Options for report publication, or `false` to disable publication\n   */\n  publish: IPublishConfig | false\n  /**\n   * Options to be provided to formatters\n   * @remarks\n   * The value must be a JSON-serializable object.\n   */\n  options: JsonObject\n}\n\n/**\n * Structured configuration object suitable for passing to {@link runCucumber}\n * @public\n */\nexport interface IRunConfiguration {\n  sources: ISourcesCoordinates\n  support: ISupportCodeCoordinates\n  runtime: IRunOptionsRuntime\n  formats: IRunOptionsFormats\n}\n\n/**\n * A collection of user-defined code and setup (\"support code\") that can be\n * used for a test run\n * @public\n * @remarks\n * This is mostly a marker interface. The actual instance is a complex object\n * that you shouldn't interact with directly, but some functions return and/or\n * accept it as a means of optimising a test workflow.\n */\nexport interface ISupportCodeLibrary {\n  readonly originalCoordinates: ISupportCodeCoordinates\n}\n\n/**\n * Either an actual {@link ISupportCodeLibrary | support code library}, or the\n * {@link ISupportCodeCoordinates | coordinates} required to create and\n * populate one\n * @public\n * @remarks\n * This alias exists because {@link runCucumber} will accept an existing\n * support code library in its options and thus avoid trying to load it again,\n * improving performance and avoiding cache issues for use cases where multiple\n * test runs happen within the same process. Note this is only useful in serial\n * mode, as parallel workers will each load the support code themselves anyway.\n */\nexport type ISupportCodeCoordinatesOrLibrary =\n  | ISupportCodeCoordinates\n  | ISupportCodeLibrary\n\n/**\n * Options for {@link runCucumber}\n * @public\n */\nexport interface IRunOptions {\n  sources: ISourcesCoordinates\n  support: ISupportCodeCoordinatesOrLibrary\n  runtime: IRunOptionsRuntime\n  formats: IRunOptionsFormats\n}\n\n/**\n * Contextual data about the project environment\n * @public\n */\nexport interface IRunEnvironment {\n  /**\n   * Working directory for the project\n   * @default process.cwd()\n   */\n  cwd?: string\n  /**\n   * Writable stream where the test run's main formatter output is written\n   * @default process.stdout\n   */\n  stdout?: Writable\n  /**\n   * Writable stream where the test run's warning/error output is written\n   * @default process.stderr\n   */\n  stderr?: Writable\n  /**\n   * Environment variables\n   * @default process.env\n   */\n  env?: NodeJS.ProcessEnv\n  /**\n   * Whether debug logging should be emitted to {@link IRunEnvironment.stderr}\n   * @default false\n   * @see {@link https://github.com/cucumber/cucumber-js/blob/main/docs/debugging.md}\n   */\n  debug?: boolean\n}\n\n/**\n * Response from {@link runCucumber}\n * @public\n */\nexport interface IRunResult {\n  /**\n   * Whether the test run was overall successful\n   * @remarks\n   * The exact meaning can vary based on the `strict` configuration option.\n   */\n  success: boolean\n  /**\n   * The support code library that was used in the test run\n   * @remarks\n   * This can be reused in subsequent {@link runCucumber} calls,\n   * see {@link ISupportCodeCoordinatesOrLibrary}\n   */\n  support: ISupportCodeLibrary\n}\n"]}