import { PromptbookJson } from '../_packages/types.index';
import { ExecutionTools } from './ExecutionTools';
import { PromptbookExecutor } from './PromptbookExecutor';
type CreatePromptbookExecutorSettings = {
    /**
     * When executor does not satisfy expectations it will be retried this amount of times
     *
     * @default 3
     */
    readonly maxExecutionAttempts: number;
};
/**
 * Options for creating a promptbook executor
 */
interface CreatePromptbookExecutorOptions {
    /**
     * The promptbook to be executed
     */
    readonly promptbook: PromptbookJson;
    /**
     * The execution tools to be used during the execution of the PROMPTBOOK
     */
    readonly tools: ExecutionTools;
    /**
     * Optional settings for the PROMPTBOOK executor
     */
    readonly settings?: Partial<CreatePromptbookExecutorSettings>;
}
/**
 * Creates executor function from promptbook and execution tools.
 *
 * @returns The executor function
 * @throws {PromptbookLogicError} on logical error in the promptbook
 */
export declare function createPromptbookExecutor(options: CreatePromptbookExecutorOptions): PromptbookExecutor;
export {};
/**
 * TODO: [ðŸ§ ] When not meet expectations in PROMPT_DIALOG, make some way to tell the user
 * TODO: [ðŸ‘§] Strongly type the executors to avoid need of remove nullables whtn noUncheckedIndexedAccess in tsconfig.json
 * Note: CreatePromptbookExecutorOptions are just connected to PromptbookExecutor so do not extract to types folder
 * TODO: [ðŸ§ ][3] transparent = (report intermediate parameters) / opaque execution = (report only output parameters) progress reporting mode
 */
