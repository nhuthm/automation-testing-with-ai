import type { Prompt } from '../../../../types/Prompt';
import type { LlmExecutionTools } from '../../../LlmExecutionTools';
import type { PromptChatResult, PromptCompletionResult } from '../../../PromptResult';
import type { OpenAiExecutionToolsOptions } from './OpenAiExecutionToolsOptions';
/**
 * Execution Tools for calling OpenAI API.
 */
export declare class OpenAiExecutionTools implements LlmExecutionTools {
    private readonly options;
    /**
     * OpenAI API client.
     */
    private readonly openai;
    /**
     * Creates OpenAI Execution Tools.
     *
     * @param options which are relevant are directly passed to the OpenAI client
     */
    constructor(options: OpenAiExecutionToolsOptions);
    /**
     * Calls OpenAI API to use a chat model.
     */
    gptChat(prompt: Prompt): Promise<PromptChatResult>;
    /**
     * Calls OpenAI API to use a complete model.
     */
    gptComplete(prompt: Prompt): Promise<PromptCompletionResult>;
}
/**
 * TODO: [üçì][‚ôê] Allow to list compatible models with each variant
 * TODO: Maybe Create some common util for gptChat and gptComplete
 * TODO: Maybe make custom OpenaiError
 */
